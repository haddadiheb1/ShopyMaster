C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\DashboardScreen.kt:145: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                        value = "${String.format("%.2f", totalCredit)}",
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\DashboardScreen.kt:154: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                    value = "${String.format("%.2f", totalBailsAmount)}",
                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\DashboardScreen.kt:162: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                    value = "${String.format("%.2f", todaySales)}",
                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\DashboardScreen.kt:185: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                                    Text("Credit: ${String.format("%.2f", client.credit)}", color = MaterialTheme.colorScheme.primary)
                                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\DashboardScreen.kt:209: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                                    Text("Price: ${String.format("%.2f", product.price)}", color = MaterialTheme.colorScheme.secondary)
                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\HistoryScreen.kt:69: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                    Text("${row.day} — ${String.format("%.2f", row.total)}")
                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\HistoryScreen.kt:76: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                    Text("${java.text.SimpleDateFormat("HH:mm").format(java.util.Date(sale.timestampMillis))} — ${String.format("%.2f", sale.totalAmount)}")
                                                                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\ProductsScreen.kt:56: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                            Text(String.format("%s — %.2f", p.barcode, p.price), color = androidx.compose.ui.graphics.Color.Gray)
                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\SupplierBailDetailScreen.kt:33: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                var amountText by remember { mutableStateOf(String.format("%.2f", bail.amount)) }
                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "DefaultLocale":
   Calling String#toLowerCase() or #toUpperCase() without specifying an
   explicit locale is a common source of bugs. The reason for that is that
   those methods will use the current locale on the user's device, and even
   though the code appears to work correctly when you are developing the app,
   it will fail in some locales. For example, in the Turkish locale, the
   uppercase replacement for i is not I.

   If you want the methods to just perform ASCII replacement, for example to
   convert an enum name, call String#toUpperCase(Locale.ROOT) instead. If you
   really want to use the current locale, call
   String#toUpperCase(Locale.getDefault()) instead.

   https://developer.android.com/reference/java/util/Locale.html#default_locale

C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:101: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64#getEncoder [NewApi]
        return Base64.getEncoder().encodeToString(exportData.toByteArray())
                      ~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:101: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64.Encoder#encodeToString [NewApi]
        return Base64.getEncoder().encodeToString(exportData.toByteArray())
                                   ~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:109: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64#getDecoder [NewApi]
            val decodedBytes = Base64.getDecoder().decode(qrData)
                                      ~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:109: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64.Decoder#decode [NewApi]
            val decodedBytes = Base64.getDecoder().decode(qrData)
                                                   ~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:223: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64#getEncoder [NewApi]
        return Base64.getEncoder().encodeToString(output.toByteArray())
                      ~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:223: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64.Encoder#encodeToString [NewApi]
        return Base64.getEncoder().encodeToString(output.toByteArray())
                                   ~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:227: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64#getDecoder [NewApi]
        val compressedBytes = Base64.getDecoder().decode(compressedData)
                                     ~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:227: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64.Decoder#decode [NewApi]
        val compressedBytes = Base64.getDecoder().decode(compressedData)
                                                  ~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:240: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64#getDecoder [NewApi]
            Base64.getDecoder().decode(data)
                   ~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\data\DatabaseExporter.kt:240: Error: Call requires API level 26, or core library desugaring (current min is 24): java.util.Base64.Decoder#decode [NewApi]
            Base64.getDecoder().decode(data)
                                ~~~~~~

   Explanation for issues of type "NewApi":
   This check scans through all the Android API calls in the application and
   warns about any calls that are not available on all versions targeted by
   this application (according to its minimum SDK attribute in the manifest).

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

   If you are deliberately setting android: attributes in style definitions,
   make sure you place this in a values-vNN folder in order to avoid running
   into runtime conflicts on certain devices where manufacturers have added
   custom attributes whose ids conflict with the new ones on later platforms.

   Similarly, you can use tools:targetApi="11" in an XML file to indicate that
   the element will only be inflated in an adequate context.

C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:14: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk = 34
        ~~~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application runs on a version of Android that is more recent than
   your targetSdkVersion specifies that it has been tested with, various
   compatibility modes kick in. This ensures that your application continues
   to work, but it may look out of place. For example, if the targetSdkVersion
   is less than 14, your app may get an option button in the UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\ClientDetailScreen.kt:148: Warning: To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates. [SimpleDateFormat]
                            val dateText = java.text.SimpleDateFormat("yyyy-MM-dd HH:mm").format(java.util.Date(entry.timestampMillis))
                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\util\CsvExporter.kt:37: Warning: To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates. [SimpleDateFormat]
            val date = java.text.SimpleDateFormat("yyyy-MM-dd HH:mm").format(java.util.Date(sale.timestampMillis))
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\HistoryScreen.kt:76: Warning: To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates. [SimpleDateFormat]
                    Text("${java.text.SimpleDateFormat("HH:mm").format(java.util.Date(sale.timestampMillis))} — ${String.format("%.2f", sale.totalAmount)}")
                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\HistoryScreen.kt:84: Warning: To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates. [SimpleDateFormat]
    val df = java.text.SimpleDateFormat("yyyy-MM-dd")
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\SupplierBailsScreen.kt:68: Warning: To get local formatting use getDateInstance(), getDateTimeInstance(), or getTimeInstance(), or use new SimpleDateFormat(String template, Locale locale) with for example Locale.US for ASCII dates. [SimpleDateFormat]
                        val dateText = java.text.SimpleDateFormat("yyyy-MM-dd HH:mm").format(java.util.Date(bail.timestampMillis))
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "SimpleDateFormat":
   Almost all callers should use getDateInstance(), getDateTimeInstance(), or
   getTimeInstance() to get a ready-made instance of SimpleDateFormat suitable
   for the user's locale. The main reason you'd create an instance this class
   directly is because you need to format/parse a specific machine-readable
   format, in which case you almost certainly want to explicitly ask for US to
   ensure that you get ASCII digits (rather than, say, Arabic digits).

   Therefore, you should either use the form of the SimpleDateFormat
   constructor where you pass in an explicit locale, such as Locale.US, or use
   one of the get instance methods, or suppress this error if really know what
   you are doing.

   https://developer.android.com/reference/java/text/SimpleDateFormat.html

C:\Users\moi\Desktop\Hanouti App\app\src\main\AndroidManifest.xml:11: Warning: Attribute localeConfig is only used in API level 33 and higher (current min is 24) [UnusedAttribute]
        android:localeConfig="@xml/locales_config"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedAttribute":
   This check finds attributes set in XML files that were introduced in a
   version newer than the oldest version targeted by your application (with
   the minSdkVersion attribute).

   This is not an error; the application will simply ignore the attribute.
   However, if the attribute is important to the appearance or functionality
   of your application, you should consider finding an alternative way to
   achieve the same result with only available attributes, and then you can
   optionally create a copy of the layout in a layout-vNN folder which will be
   used on API NN or higher where you can take advantage of the newer
   attribute.

   Note: This check does not only apply to attributes. For example, some tags
   can be unused too, such as the new <tag> element in layouts introduced in
   API 21.

C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:52: Warning: A newer version of androidx.compose:compose-bom than 2024.06.00 is available: 2025.08.00 [GradleDependency]
    implementation(platform("androidx.compose:compose-bom:2024.06.00"))
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:65: Warning: A newer version of androidx.activity:activity-compose than 1.9.0 is available: 1.10.1 [GradleDependency]
    implementation("androidx.activity:activity-compose:1.9.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:66: Warning: A newer version of androidx.lifecycle:lifecycle-runtime-ktx than 2.7.0 is available: 2.9.2 [GradleDependency]
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:67: Warning: A newer version of androidx.navigation:navigation-compose than 2.7.7 is available: 2.9.3 [GradleDependency]
    implementation("androidx.navigation:navigation-compose:2.7.7")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:70: Warning: A newer version of androidx.appcompat:appcompat than 1.7.0 is available: 1.7.1 [GradleDependency]
    implementation("androidx.appcompat:appcompat:1.7.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:73: Warning: A newer version of androidx.datastore:datastore-preferences than 1.1.1 is available: 1.1.7 [GradleDependency]
    implementation("androidx.datastore:datastore-preferences:1.1.1")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:83: Warning: A newer version of androidx.room:room-runtime than 2.6.1 is available: 2.7.2 [GradleDependency]
    implementation("androidx.room:room-runtime:$roomVersion")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:84: Warning: A newer version of androidx.room:room-compiler than 2.6.1 is available: 2.7.2 [GradleDependency]
    ksp("androidx.room:room-compiler:$roomVersion")
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:85: Warning: A newer version of androidx.room:room-ktx than 2.6.1 is available: 2.7.2 [GradleDependency]
    implementation("androidx.room:room-ktx:$roomVersion")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:89: Warning: A newer version of androidx.camera:camera-core than 1.3.4 is available: 1.4.2 [GradleDependency]
    implementation("androidx.camera:camera-core:$cameraXVersion")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:90: Warning: A newer version of androidx.camera:camera-camera2 than 1.3.4 is available: 1.4.2 [GradleDependency]
    implementation("androidx.camera:camera-camera2:$cameraXVersion")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:91: Warning: A newer version of androidx.camera:camera-lifecycle than 1.3.4 is available: 1.4.2 [GradleDependency]
    implementation("androidx.camera:camera-lifecycle:$cameraXVersion")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:92: Warning: A newer version of androidx.camera:camera-view than 1.3.4 is available: 1.4.2 [GradleDependency]
    implementation("androidx.camera:camera-view:$cameraXVersion")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\build.gradle.kts:95: Warning: A newer version of com.google.mlkit:barcode-scanning than 17.2.0 is available: 17.3.0 [GradleDependency]
    implementation("com.google.mlkit:barcode-scanning:17.2.0")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\ScannerScreen.kt:80: Error: This declaration is opt-in and its usage should be marked with @androidx.camera.core.ExperimentalGetImage or @OptIn(markerClass = androidx.camera.core.ExperimentalGetImage.class) [UnsafeOptInUsageError from androidx.annotation.experimental]
                    val mediaImage = imageProxy.image
                                                ~~~~~

   Explanation for issues of type "UnsafeOptInUsageError":
   This API has been flagged as opt-in with error-level severity.

   Any declaration annotated with this marker is considered part of an
   unstable or
   otherwise non-standard API surface and its call sites should accept the
   opt-in
   aspect of it by using the @OptIn annotation, using the marker annotation
   --
   effectively causing further propagation of the opt-in aspect -- or
   configuring
   the UnsafeOptInUsageError check's options for project-wide opt-in.

   To configure project-wide opt-in, specify the opt-in option value in
   lint.xml
   as a comma-delimited list of opted-in annotations:

   <lint>
       <issue id="UnsafeOptInUsageError">
           <option name="opt-in" value="com.foo.ExperimentalBarAnnotation" />
       </issue>
   </lint>

   Vendor: Android Open Source Project
   Identifier: androidx.annotation.experimental
   Feedback: https://issuetracker.google.com/issues/new?component=459778

C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\navigation\AppNavHost.kt:375: Error: Calling getBackStackEntry during composition without using remember with a NavBackStackEntry key [UnrememberedGetBackStackEntry from androidx.navigation.compose]
                val parentEntry = remember(navController) { navController.getBackStackEntry(Routes.Sales) }
                                                                          ~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\navigation\AppNavHost.kt:389: Error: Calling getBackStackEntry during composition without using remember with a NavBackStackEntry key [UnrememberedGetBackStackEntry from androidx.navigation.compose]
                val parentEntry = try { navController.getBackStackEntry(Routes.Sales) } catch (e: Exception) { null }
                                                      ~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnrememberedGetBackStackEntry":
   Backstack entries retrieved during composition need to be `remember`ed,
   otherwise they will be retrieved from the navController again, and be
   changed. You also need to pass in a key of a NavBackStackEntry to the
   remember call or they will not be updated properly. If this is in a
   NavGraphBuilder.composable scope, you should pass in the lambda's given
   entry as the key. Either hoist the state to an object that is not created
   during composition, or wrap the state in a call to remember with a
   NavBackStackEntry as a key.

   Vendor: Jetpack Navigation Compose
   Identifier: androidx.navigation.compose

C:\Users\moi\Desktop\Hanouti App\app\src\main\AndroidManifest.xml:3: Error: Permission exists without corresponding hardware <uses-feature android:name="android.hardware.camera" required="false"> tag [PermissionImpliesUnsupportedChromeOsHardware]
    <uses-permission android:name="android.permission.CAMERA" />
     ~~~~~~~~~~~~~~~

   Explanation for issues of type "PermissionImpliesUnsupportedChromeOsHardware":
   The <uses-permission> element should not require a permission that implies
   an unsupported large screen hardware feature. Google Play assumes that
   certain hardware related permissions indicate that the underlying hardware
   features are required by default. To fix the issue, consider declaring the
   corresponding <uses-feature> element with required="false" attribute.

   https://developer.android.com/topic/arc/manifest.html#implied-features

C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\theme\Theme.kt:21: Warning: Unnecessary; SDK_INT is always >= 24 [ObsoleteSdkInt]
    val currentLocale = if (android.os.Build.VERSION.SDK_INT >= 24) cfg.locales.get(0) else cfg.locale
                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\DashboardScreen.kt:248: Information: Prefer mutableLongStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    var tempStartMillis by remember { mutableStateOf(initialStartMillis ?: System.currentTimeMillis()) }
                                      ~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\DashboardScreen.kt:249: Information: Prefer mutableLongStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    var tempEndMillis by remember { mutableStateOf(initialEndMillis ?: System.currentTimeMillis()) }
                                    ~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\java\com\hanouti\app\ui\screens\QRScannerScreen.kt:45: Information: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    var importProgress by remember { mutableStateOf(0f) }
                                     ~~~~~~~~~~~~~~

   Explanation for issues of type "AutoboxingStateCreation":
   Calling mutableStateOf<T>() when T is either backed by a primitive type on
   the JVM or is a value class results in a state implementation that requires
   all state values to be boxed. This usually causes an additional allocation
   for each state write, and adds some additional work to auto-unbox values
   when reading the value of the state. Instead, prefer to use a specialized
   primitive state implementation for Int, Long, Float, and Double when the
   state does not need to track null values and does not override the default
   SnapshotMutationPolicy. See mutableIntStateOf(), mutableLongStateOf(),
   mutableFloatStateOf(), and mutableDoubleStateOf() for more information.

   Vendor: Jetpack Compose
   Identifier: androidx.compose.runtime
   Feedback: https://issuetracker.google.com/issues/new?component=612128

C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\colors.xml:3: Warning: The resource R.color.ic_launcher_background appears to be unused [UnusedResources]
    <color name="ic_launcher_background">#FF6F00</color>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\drawable\ic_launcher_foreground.xml:1: Warning: The resource R.drawable.ic_launcher_foreground appears to be unused [UnusedResources]
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
^
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:44: Warning: The resource R.string.save_changes appears to be unused [UnusedResources]
    <string name="save_changes">Save changes</string>
            ~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:75: Warning: The resource R.string.app_logo appears to be unused [UnusedResources]
    <string name="app_logo">App Logo</string>
            ~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:76: Warning: The resource R.string.ready_to_sync_data appears to be unused [UnusedResources]
    <string name="ready_to_sync_data">Ready to Sync Data</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:77: Warning: The resource R.string.point_camera_qr appears to be unused [UnusedResources]
    <string name="point_camera_qr">Point your camera at the sync QR code from the other worker</string>
            ~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:78: Warning: The resource R.string.importing_data appears to be unused [UnusedResources]
    <string name="importing_data">Importing Data...</string>
            ~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:79: Warning: The resource R.string.percent_complete appears to be unused [UnusedResources]
    <string name="percent_complete">%1$d%% Complete</string>
            ~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:80: Warning: The resource R.string.please_wait_sync appears to be unused [UnusedResources]
    <string name="please_wait_sync">Please wait while we synchronize your data...</string>
            ~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:81: Warning: The resource R.string.sync_success_title appears to be unused [UnusedResources]
    <string name="sync_success_title">Sync Successful!</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:82: Warning: The resource R.string.sync_failed_title appears to be unused [UnusedResources]
    <string name="sync_failed_title">Sync Failed</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:83: Warning: The resource R.string.invalid_qr_detail appears to be unused [UnusedResources]
    <string name="invalid_qr_detail">The QR code data is invalid or corrupted</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:66: Warning: Replace "..." with ellipsis character (…, &#8230;) ? [TypographyEllipsis]
    <string name="generating_qr_code">Generating QR Code...</string>
                                      ~~~~~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:78: Warning: Replace "..." with ellipsis character (…, &#8230;) ? [TypographyEllipsis]
    <string name="importing_data">Importing Data...</string>
                                  ~~~~~~~~~~~~~~~~~
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\values\strings.xml:80: Warning: Replace "..." with ellipsis character (…, &#8230;) ? [TypographyEllipsis]
    <string name="please_wait_sync">Please wait while we synchronize your data...</string>
                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "TypographyEllipsis":
   You can replace the string "..." with a dedicated ellipsis character,
   ellipsis character (u2026, &#8230;). This can help make the text more
   readable.

   https://en.wikipedia.org/wiki/Ellipsis

C:\Users\moi\Desktop\Hanouti App\app\src\main\res\mipmap-hdpi\ic_launcher.png: Warning: Launcher icon used as round icon did not have a circular shape [IconLauncherShape]
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\mipmap-mdpi\ic_launcher.png: Warning: Launcher icon used as round icon did not have a circular shape [IconLauncherShape]
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\mipmap-xhdpi\ic_launcher.png: Warning: Launcher icon used as round icon did not have a circular shape [IconLauncherShape]
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\mipmap-xxhdpi\ic_launcher.png: Warning: Launcher icon used as round icon did not have a circular shape [IconLauncherShape]
C:\Users\moi\Desktop\Hanouti App\app\src\main\res\mipmap-xxxhdpi\ic_launcher.png: Warning: Launcher icon used as round icon did not have a circular shape [IconLauncherShape]

   Explanation for issues of type "IconLauncherShape":
   According to the Android Design Guide
   (https://d.android.com/r/studio-ui/designer/material/iconography) your
   launcher icons should "use a distinct silhouette", a "three-dimensional,
   front view, with a slight perspective as if viewed from above, so that
   users perceive some depth."

   The unique silhouette implies that your launcher icon should not be a
   filled square.

C:\Users\moi\Desktop\Hanouti App\app\src\main\res\mipmap-xxxhdpi\ic_launcher.png: Warning: The image ic_launcher.png varies significantly in its density-independent (dip) size across the various density versions: mipmap-hdpi/ic_launcher.png: 32x32 dp (48x48 px), mipmap-mdpi/ic_launcher.png: 72x72 dp (72x72 px), mipmap-xhdpi/ic_launcher.png: 48x48 dp (96x96 px), mipmap-xxhdpi/ic_launcher.png: 48x48 dp (144x144 px), mipmap-xxxhdpi/ic_launcher.png: 24x24 dp (96x96 px) [IconDipSize]

   Explanation for issues of type "IconDipSize":
   Checks the all icons which are provided in multiple densities, all compute
   to roughly the same density-independent pixel (dip) size. This catches
   errors where images are either placed in the wrong folder, or icons are
   changed to new sizes but some folders are forgotten.

C:\Users\moi\Desktop\Hanouti App\app\src\main\res\mipmap-xxxhdpi\ic_launcher.png: Warning: The ic_launcher.png icon has identical contents in the following configuration folders: mipmap-xhdpi, mipmap-xxxhdpi [IconDuplicatesConfig]

   Explanation for issues of type "IconDuplicatesConfig":
   If an icon is provided under different configuration parameters such as
   drawable-hdpi or -v11, they should typically be different. This detector
   catches cases where the same icon is provided in different configuration
   folder which is usually not intentional.

14 errors, 53 warnings
